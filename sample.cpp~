#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <cv.h>
#include <time.h>
#include <highgui.h>
 #include "opencv2/objdetect/objdetect.hpp"
#include "opencv2/cudaobjdetect.hpp"
 #include "opencv2/highgui/highgui.hpp"
 #include "opencv2/imgproc/imgproc.hpp"

 #include <iostream>


using namespace std;
using namespace cv;

/** Function Headers */
 void detectAndDisplay( Mat frame );

 /** Global variables */
 String face_cascade_name = "haarcascade_frontalface_alt.xml";
 String eyes_cascade_name = "haarcascade_eye_tree_eyeglasses.xml";
 CascadeClassifier face_cascade;
 CascadeClassifier eyes_cascade;
 string window_name = "Capture - Face detection";
 RNG rng(12345);

int main(int argc, char **argv)
{

  VideoCapture cap(0);
  if(!cap.isOpened())
	return -1;


   Mat frame;
   namedWindows("cam",1);
   	for(;;)
	{
		Mat frame;
		cap>>frame;
		imshow("cam", frame);
		if(waitKey()==27)
			break;
	}


   return 0;

/*
	if(argc <2 ){
	  printf("Usage: main <image-file-name>\n");
	  exit(0);
	}
	 Mat img = imread(argv[1]);

	if(!img.data){
		printf("Could not load image");
		exit(0);
	}
	namedWindow("mainWin", CV_WINDOW_AUTOSIZE);
	imshow("mainWin",img);
	waitKey(0);
	//cvReleaseImage(&img);

	return 0;*/
}

/** @function detectAndDisplay */
void detectAndDisplay( Mat frame )
{
  double t;
  std::vector<Rect> faces;
  Mat frame_gray;

  cvtColor( frame, frame_gray, CV_BGR2GRAY );
  equalizeHist( frame_gray, frame_gray );

  t = (double)cvGetTickCount();
  //-- Detect faces
  face_cascade.detectMultiScale( frame_gray, faces, 1.1, 2, 0|CV_HAAR_SCALE_IMAGE, Size(30, 30) );
 
   t = (double)cvGetTickCount() - t;
  printf("detection time = %g ms\n", t/((double)cvGetTickFrequency()*1000.));

  for( size_t i = 0; i < faces.size(); i++ )
  {
    Point center( faces[i].x + faces[i].width*0.5, faces[i].y + faces[i].height*0.5 );
    ellipse( frame, center, Size( faces[i].width*0.5, faces[i].height*0.5), 0, 0, 360, Scalar( 255, 0, 255 ), 4, 8, 0 );

    Mat faceROI = frame_gray( faces[i] );
    std::vector<Rect> eyes;

    //-- In each face, detect eyes
    eyes_cascade.detectMultiScale( faceROI, eyes, 1.1, 2, 0 |CV_HAAR_SCALE_IMAGE, Size(30, 30) );

    for( size_t j = 0; j < eyes.size(); j++ )
     {
       Point center( faces[i].x + eyes[j].x + eyes[j].width*0.5, faces[i].y + eyes[j].y + eyes[j].height*0.5 );
       int radius = cvRound( (eyes[j].width + eyes[j].height)*0.25 );
       circle( frame, center, radius, Scalar( 255, 0, 0 ), 4, 8, 0 );
     }
  }
  //-- Show what you got
  imshow( window_name, frame );
 }
